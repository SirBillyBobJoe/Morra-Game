package nz.ac.auckland.se281.ai;

import nz.ac.auckland.se281.strategy.AverageStrategy;
import nz.ac.auckland.se281.strategy.ProcessStrategy;
import nz.ac.auckland.se281.strategy.RandomStrategy;
import nz.ac.auckland.se281.strategy.TopStrategy;

public class MasterLevel implements Level {
  // master strategy initially uses random strategy and then switches to alternating between top and
  // average strategy
  private ProcessStrategy processStrategy = new ProcessStrategy(new RandomStrategy());
  private int count = 1;

  @Override
  public int getFingers() {
    // change strategy to average strategy after 3 rounds
    if (count > 3) {
      // if already top strategy then switch to average strategy
      if (processStrategy.getStrategy() == "Random" || processStrategy.getStrategy() == "Top") {
        processStrategy.setStrategy(new AverageStrategy());
      } else {
        // if already average strategy then switch to top strategy
        processStrategy.setStrategy(new TopStrategy());
      }
    }

    count++;
    return processStrategy.getFingers();
  }

  @Override
  // returns the sum generated by the strategy
  public int getSum(int num) {
    return processStrategy.getSum(num);
  }
}
